# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# DOCKER COMPOSE FOR FLOWKIT
#

version: '3.9'

x-flowpyter_task-common:
  &flowpyter_task-common
  image: flowminder/flowbot:${CONTAINER_TAG:-latest}
  restart: always
  group_add:
    - "998"
  tty: true
  stdin_open: true

  # We probably _don't_ want every container to have access to the docker controls;
  # we should move this once everything seems to be working
  volumes:
    - type: bind
      source: ${DOCKER_SOCKET:-/var/run/docker.sock}
      target: /var/run/docker.sock
    - type: bind
      source: ${HOST_DAGS_DIR:?Must set HOST_DAGS_DIR env var}
      target: /opt/airflow/dags
      read_only: true
    - type: bind
      source: ./test_variables.json
      target: /flowpyter-task/tests/test_variables.json
#     Uncomment for local dev
#    - type: bind
#      source: /home/john/projects/flowpyter-task
#      target: /flowpyter-task

  environment:
    &flowpyter_task-envs
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__XCOM_BACKEND:
    AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${SQL_ALCHEMY_CONN:?Must set SQL_ALCHEMY_CONN env var}
    AIRFLOW__CORE__FERNET_KEY: ${FLOWPYTERTASK_FERNET_KEY:?Must set FLOWPYTERTASK_FERNET_KEY env var}
    AIRFLOW__CELERY__RESULT_BACKEND: "db+${SQL_ALCHEMY_CONN:?}"
    FLOWETL_REDIS_PASSWORD: ${FLOWPYTERTASK_REDIS_PASSWORD:?Must set FLOWPYTERTASK_REDIS_PASSWORD}
    AIRFLOW__CELERY__BROKER_URL: redis://:${FLOWPYTERTASK_REDIS_PASSWORD:?Must set FLOWPYTERTASK_REDIS_PASSWORD}@flowpyter_task_redis:6379/0
    AIRFLOW__WEBSERVER__SECRET_KEY: "replaceme"
    POSTGRES_HOST: flowpyter_task_db
    FLOWPYTERTASK_AIRFLOW_PG_POOL_SLOT_COUNT: 4
    FLOWETL_POSTGRES_USER: ${FLOWPYTERTASK_POSTGRES_USER:?Must set FLOWPYTERTASK_POSTGRES_USER env var}
    FLOWETL_POSTGRES_PASSWORD: ${FLOWPYTERTASK_POSTGRES_PASSWORD:?Must set FLOWPYTERTASK_POSTGRES_PASSWORD env var}

    AIRFLOW_VAR_HOST_NOTEBOOK_DIR: ${HOST_NOTEBOOK_DIR:?Must set HOST_NOTEBOOK_DIR env var}
    AIRFLOW_VAR_HOST_NOTEBOOK_OUT_DIR: ${HOST_NOTEBOOK_OUT_DIR:?Must set HOST_NOTEBOOK_OUT_DIR env var}
    AIRFLOW_VAR_HOST_TEMPLATE_DIR: ${HOST_TEMPLATE_DIR:?Must set HOST_TEMPLATE_DIR env var}
    AIRFLOW_VAR_HOST_STATIC_DIR: ${HOST_STATIC_DIR:?Must set HOST_STATIC_DIR env var}
    AIRFLOW_VAR_HOST_DAG_PATH: ${HOST_DAGS_DIR:?Must set HOST_DAGS_DIR env var}
    AIRFLOW_VAR_FLOWAPI_TOKEN: ${FLOWAPI_TOKEN:?Must set FLOWAPI_TOKEN env var}
    AIRFLOW_VAR_HOST_DAGRUN_DATA_DIR: ${HOST_DAGRUN_DATA_DIR:?Must set HOST_DAGRUN_DATA_DIR env var}
    AIRFLOW_VAR_NOTEBOOK_UID: ${NOTEBOOK_UID:?Must set NOTEBOOK_UID env var}
    AIRFLOW_VAR_NOTEBOOK_GID: ${NOTEBOOK_GID:?Must set NOTEBOOK_GID env var}

  depends_on:
    &flowpyter_task-deps
    flowpyter_task_db:
      condition: service_healthy
    flowpyter_task_redis:
      condition: service_healthy
    flowpyter_task_init:
      condition: service_completed_successfully


networks:
  flowpyter_task:

services:

  # Flowetl components (scheduler, redis, worker(s), postgres db, webserver, triggerer,
  flowpyter_task_scheduler:
    << : *flowpyter_task-common
    container_name: flowpyter_task_scheduler
    command: scheduler
    networks:
      - flowpyter_task
    depends_on:
      <<: *flowpyter_task-deps

  flowpyter_task_db:
    image: postgres:15.3
    container_name: flowpyter_task_db
    tty: true
    stdin_open: true
    restart: always
    ports:
      - ${FLOWPYTERTASK_POSTGRES_PORT:?Must set FLOWPYTERTASK_POSTGRES_PORT env var}:5432
    environment:
      POSTGRES_USER: ${FLOWPYTERTASK_POSTGRES_USER:?Must set FLOWPYTERTASK_POSTGRES_USER env var}
      POSTGRES_PASSWORD: ${FLOWPYTERTASK_POSTGRES_PASSWORD:?Must set FLOWPYTERTASK_POSTGRES_PASSWORD env var}
      POSTGRES_DB: ${FLOWPYTERTASK_POSTGRES_DB:?Must set FLOWPYTERTASK_POSTGRES_DB env var}
      <<: *flowpyter_task-envs
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${FLOWPYTERTASK_POSTGRES_USER}"]
      interval: 15s
      timeout: 30s
      retries: 10
    networks:
      flowpyter_task:
        aliases:
          - flowpytertask_db

  flowpyter_task_redis:
    container_name: flowpyter_task_redis
    image: bitnami/redis:latest
    environment:
      - REDIS_PASSWORD=${FLOWPYTERTASK_REDIS_PASSWORD:?Must set FLOWPYTERTASK_REDIS_PASSWORD env var}
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      flowpyter_task:
        aliases:
          - flowpyter_task_redis

  flowpyter_task_worker:
    <<: *flowpyter_task-common
    command: celery worker
    deploy:
      replicas: ${FLOWPYTERTASK_WORKER_COUNT:-1}
    networks:
      - flowpyter_task
    environment:
      <<: *flowpyter_task-envs
    depends_on:
      <<: *flowpyter_task-deps

  flowpyter_task_webserver:
    container_name: flowpyter_task_webserver
    <<: *flowpyter_task-common
    ports:
      - ${FLOWPYTERTASK_PORT:?Must set FLOWPYTERTASK_PORT env var}:8080
    command: webserver
    networks:
      - flowpyter_task
    environment:
      <<: *flowpyter_task-envs
    depends_on:
      <<: *flowpyter_task-deps

  flowpyter_task_flower:
    container_name: flowpyter_task_flower
    <<: *flowpyter_task-common
    command: celery flower
    ports:
      - ${FLOWPYTERTASK_CELERY_PORT:?Must set FLOWPYTERTASK_CELERY_PORT env var}:5555
    restart: always
    networks:
      - flowpyter_task
    environment:
      <<: *flowpyter_task-envs
    depends_on:
      <<: *flowpyter_task-deps

  flowpyter_task_triggerer:
    container_name: flowpyter_task_triggerer
    <<: *flowpyter_task-common
    command: triggerer
    restart: always
    networks:
      - flowpyter_task
    environment:
      <<: *flowpyter_task-envs
    depends_on:
      <<: *flowpyter_task-deps

  flowpyter_task_init:
    container_name: flowpyter_task_init
    <<: *flowpyter_task-common
    environment:
      <<: *flowpyter_task-envs
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_PASSWORD: ${FLOWPYTERTASK_WEBSERVER_PASSWORD:?Must set FLOWPYTERTASK_WEBSERVER_PASSWORD env var}
    command: "airflow db init && airflow variables import /flowpyter-task/tests/test_variables.json"
    networks:
      - flowpyter_task
    depends_on:
      - flowpyter_task_db
      - flowpyter_task_redis
    restart: no





