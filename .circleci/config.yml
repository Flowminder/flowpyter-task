#Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
jobs:
  test:
    machine:
      image: ubuntu-2204:current
    environment:
      DOCKER_SOCKET: /run/docker.sock
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Run tests
          command: |
            # Open permission on docker.sock to allow containers to spawn other containers
            sudo chmod 777 /run/docker.sock
            # Touching requirements files here so that make doesn't rebuild them - we can't rely on file timestamps in a fresh repo clone
            touch requirements.txt dev-requirements.txt
            make CI=true dev-sync
            docker login -u $DOCKER_CLOUD_USER -p $DOCKER_CLOUD_PASSWORD
            . .venv/bin/activate; airflow db migrate
            export AIRFLOW_VAR_FLOWAPI_TOKEN="set_in_host"
            export CONTAINER_TAG=$CIRCLE_SHA1
            export FLOWKIT_VERSION=$(cat .flowkit-version)
            cd tests
            pytest --junitxml=test_out.xml .
      - store_test_results:
          path: tests/test_out.xml
  lint:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Lint with black
          command: |
            touch requirements.txt dev-requirements.txt
            make CI=true black-check
  test_pypi_publish:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Create and upload wheel to test pypi
          command: |
            pyenv local 3.10
            python3 setup.py sdist bdist_wheel
            sudo add-apt-repository universe -y
            sudo apt-get update
            sudo apt install -y python3-pip
            sudo pip install pipenv
            pipenv install twine
            pipenv run twine upload --repository testpypi dist/*

  pypi_publish:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout # checkout source code to working directory
      - run:
          name: Create and upload wheel to pypi
          command: |
            pyenv local 3.10
            python3 setup.py sdist bdist_wheel
            sudo add-apt-repository universe -y
            sudo apt-get update
            sudo apt install -y python3-pip
            sudo pip install pipenv
            pipenv install twine
            pipenv run twine upload dist/*

  build_docker_image:
    machine:
      image: ubuntu-2004:2023.10.1
    working_directory: /home/circleci/project/
    steps:
      - checkout:
          path: /home/circleci/project/
      - attach_workspace:
          at: /home/circleci
      - run: sudo apt update && sudo apt install docker-ce
      - run:
          name: Log in to docker cloud
          command: docker login --username $DOCKER_CLOUD_USER --password $DOCKER_CLOUD_PASSWORD
      - run:
          name: Build flowbot image
          command: |
            echo "Tagging as $CIRCLE_SHA1"
            export SOURCE_VERSION=$(git describe --tags --dirty --always | sed s/"-"/"+"/ | sed s/"-"/"."/g)
            DOCKER_BUILDKIT=1 docker build --progress=plain --build-arg FLOWETL_VERSION=$(cat .flowkit-version) --build-arg SOURCE_VERSION=$SOURCE_VERSION -t flowminder/flowbot:$CIRCLE_SHA1 -f Dockerfile .
      - run:
          name: Push images to Docker cloud
          command: |
            docker push flowminder/flowbot:$CIRCLE_SHA1

  retag_image:
    parameters:
      tag:
        type: string
        default: "latest"
    docker:
      - image: cimg/python:3.7
    steps:
      - run:
          name: Install retagger
          command: wget -q https://github.com/joshdk/docker-retag/releases/download/0.0.2/docker-retag && sudo install docker-retag /usr/bin
      - run:
          name: Retag
          command: |
            export DOCKER_USER=$DOCKER_CLOUD_USER
            export DOCKER_PASS=$DOCKER_CLOUD_PASSWORD
            docker-retag flowminder/flowbot:$CIRCLE_SHA1 ${<< parameters.tag >>:-latest}

  build_docs:
    docker:
      - image: cimg/python:3.12
    working_directory: /home/circleci/project/docs
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: pip install -r requirements.txt
      - run: mkdocs build
      - run: zip -r flowpyter-task-docs.zip flowpyter-task-docs/*
      - store_artifacts:
          path: /home/circleci/project/docs/flowpyter-task-docs.zip
          destination: docs

  deploy_docs:
    docker:
      - image: cimg/python:3.12
    working_directory: /home/circleci/project/docs
    steps:
      - checkout:
          path: /home/circleci/project/
      - run: pip install -r requirements.txt
      - run: git fetch origin gh-pages --depth=1
      - run:
          name: Set git committer
          command: |
            git config user.name $GIT_COMMITTER_NAME
            git config user.email $GIT_COMMITTER_EMAIL
      - run: mike deploy --push --update-aliases ${CIRCLE_TAG:="main"} latest

workflows:
  test_publish:
    jobs:
      - lint
      - test:
          context: org-global
          filters:
            tags:
              only: /.*/
          requires:
            - build_docker_image
      - build_docs:
          context: org-global
          filters:
            tags:
              only: /.*/
      - deploy_docs:
          context: org-global
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
          requires:
            - build_docs
            - test
            - build_docker_image
            - lint
      - test_pypi_publish:
          requires:
            - test
          context: test-pypi
          filters:
            branches:
              only:
                - test_upload
      - pypi_publish:
          requires:
            - test
            - lint
          context: org-global
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
      - build_docker_image:
          context: org-global
          filters:
            tags:
              only: /.*/
      - retag_image:
          name: retag_master_branch
          requires: &retag_requirements
            - test
            - lint
            - build_docker_image
          context: org-global
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
